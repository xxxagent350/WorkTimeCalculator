Отчёт на 27.01.2025 о файлах *.py:
Количество файлов - 10
Количество строк - 592
Количество символов - 21555




------------------------------------------------------------
activity_detector.py:
import asyncio
from pynput import keyboard
from datetime import datetime, timedelta

last_keypress_time = datetime.now() # Переменная для хранения времени последнего нажатия клавиши
NO_ACTIVITY_TIMEOUT = 180  # Время таймаута активности (в секундах)

timeout = False # Переменная для отслеживания состояния timeout


# Функция для обработки нажатий клавиш
def on_key_press(key):
    global last_keypress_time, timeout
    last_keypress_time = datetime.now()
    timeout = False  # Сброс тайм-аута при нажатии клавиши

# Асинхронная функция для отслеживания тайм-аута
async def track_timeout():
    global timeout
    while True:
        # Проверка, прошло ли больше 3 минут с момента последнего нажатия клавиши
        if datetime.now() - last_keypress_time > timedelta(seconds=NO_ACTIVITY_TIMEOUT):
            timeout = True
        await asyncio.sleep(1)  # Период проверки

# Основная асинхронная функция
async def start_tracking_activity_timeout():
    # Запуск обработчика клавиш в отдельном потоке
    listener = keyboard.Listener(on_press=on_key_press)
    listener.start()

    # Запуск отслеживания активности
    await track_timeout()

# Запуск программы
if __name__ == "__main__":
    try:
        asyncio.run(start_tracking_activity_timeout())
    except KeyboardInterrupt:
        print("Program stopped.")




------------------------------------------------------------
main_menu.py:
import os.path
import tkinter as tk
from tkinter import messagebox, filedialog
import pickle_operator

PROJECTS_DATA_PATH = 'projects.pkl'

def main_menu():
    def refresh_project_list():
        saved_projects['needs_update_13571'] = True # Наличие этого ключа означает что work_time_analyser.registered_projects необходимо обновить с диска
        pickle_operator.try_save_data(saved_projects, PROJECTS_DATA_PATH)
        project_list.delete(0, tk.END)
        for project_name in saved_projects:
            if project_name == 'needs_update_13571':
                continue
            project = saved_projects[project_name]
            status = "Игнорируется" if project.ignore else "Активен"
            project_list.insert(tk.END, f"{project_name} – {status}  ({saved_projects[project_name].project_path})")

    def change_project_path():
        selected_index = project_list.curselection()
        if not selected_index:
            messagebox.showwarning("Предупреждение", "Пожалуйста, выберите проект из списка!")
            return

        selected_project_name = project_list.get(selected_index[0]).split(" – ")[0]
        new_path = filedialog.askdirectory(title="Выберите новый путь для проекта")
        if new_path:
            saved_projects[selected_project_name].project_path = new_path
            messagebox.showinfo("Успех", f"Путь для проекта '{selected_project_name}' обновлен.")
        refresh_project_list()

    def toggle_ignore_status():
        selected_index = project_list.curselection()
        if not selected_index:
            messagebox.showwarning("Предупреждение", "Пожалуйста, выберите проект из списка!")
            return

        selected_project_name = project_list.get(selected_index[0]).split(" – ")[0]
        project = saved_projects[selected_project_name]
        if project.ignore and (not project.project_path or not os.path.exists(project.project_path)):
            messagebox.showwarning("Предупреждение", "Пожалуйста, сначала установите для проекта существующий путь!")
            return

        project.ignore = not project.ignore
        status = "Игнорируется" if project.ignore else "Активен"
        messagebox.showinfo("Успех", f"Статус проекта '{selected_project_name}' изменен на: {status}.")
        refresh_project_list()

    # Загрузка проектов
    saved_projects, error = pickle_operator.try_load_data(PROJECTS_DATA_PATH)
    if error is not None or saved_projects is None:
        saved_projects = {}

    # Главное окно
    root = tk.Tk()
    root.title("Главное меню")
    root.iconbitmap("alpha_games_logo_v3.ico")
    root.geometry("800x400")

    tk.Label(root, text="Ваши проекты", font=("Arial", 16)).pack(pady=10)

    # Список проектов
    project_list = tk.Listbox(root, width=100, height=15)
    project_list.pack(pady=10)
    refresh_project_list()

    # Кнопки
    button_frame = tk.Frame(root)
    button_frame.pack(pady=10)

    change_path_button = tk.Button(button_frame, text="Изменить путь", command=change_project_path, width=20)
    change_path_button.grid(row=0, column=0, padx=5)

    toggle_ignore_button = tk.Button(button_frame, text="Игнорировать (или нет)", command=toggle_ignore_status, width=20)
    toggle_ignore_button.grid(row=0, column=1, padx=5)

    exit_button = tk.Button(root, text="Выход", command=root.destroy, width=20)
    exit_button.pack(pady=10)

    root.mainloop()

if __name__ == "__main__":
    main_menu()




------------------------------------------------------------
new_project_ui.py:
import tkinter as tk
from tkinter import filedialog, messagebox
import os


def open_new_project_ui(program_type: str, project_name: str):
    """
    Открывает UI меню с выбором пути нового проекта.
    :param program_type: Тип программы (юнити, пайчарм и т. д.), будет выведен текстом в меню.
    :param project_name: Имя проекта, будет выведено текстом в меню.
    :return: Игнорировать ли проект, указанный путь к проекту.
    """
    result = {"ignore": True, "path" : None}  # Для хранения результата

    def browse_path():
        selected_path = filedialog.askdirectory(title="Выберите путь к проекту")
        if selected_path:
            path_var.set(selected_path)

    def on_ok():
        project_path = path_var.get()
        if not project_path:
            messagebox.showwarning("Ошибка", "Пожалуйста, укажите путь к проекту!")
        elif not os.path.exists(project_path):
            messagebox.showerror("Ошибка", "Указанный путь не существует!")
        else:
            result["ignore"] = False
            result["path"] = project_path
            root.destroy()  # Завершаем главное окно

    def on_ignore():
        result["ignore"] = True
        result["path"] = None
        root.destroy()  # Завершаем главное окно

    # Создаем главное окно
    root = tk.Tk()
    root.title("Новый проект (отслеживание времени работы)")
    root.iconbitmap("alpha_games_logo_v3.ico")

    root.geometry("700x300")
    root.resizable(True, True)

    # Создаем надписи
    tk.Label(root, text=f"Обнаружен новый проект на {program_type}: {project_name}", font=("Arial", 14)).pack(pady=10)
    tk.Label(root, text="Укажите путь к проекту для отслеживания времени работы над ним:", font=("Arial", 10)).pack()

    # Переменная для хранения пути
    path_var = tk.StringVar()

    # Поле ввода пути
    path_entry = tk.Entry(root, textvariable=path_var, width=40, font=("Arial", 10))
    path_entry.pack(pady=5)

    # Кнопка для открытия проводника
    browse_button = tk.Button(root, text="Обзор...", command=browse_path, font=("Arial", 10))
    browse_button.pack(pady=5)

    # Контейнер для кнопок "ОК" и "Игнорировать"
    button_frame = tk.Frame(root)
    button_frame.pack(pady=10)

    ignore_button = tk.Button(button_frame, text="Игнорировать проект", command=on_ignore, font=("Arial", 10), width=15)
    ok_button = tk.Button(button_frame, text="ОК", command=on_ok, font=("Arial", 10), width=15)

    ignore_button.pack(side="left", padx=5)
    ok_button.pack(side="left", padx=5)

    tk.Label(root, text=f"GO software", font=("Arial", 8)).pack(pady=10)

    # Запуск главного цикла приложения
    root.mainloop()

    # Возвращаем результат после завершения mainloop
    return result["ignore"], result["path"]


# Пример использования
if __name__ == "__main__":
    open_new_project_ui('PYCHARM', 'TEST')




------------------------------------------------------------
pickle_operator.py:
import pickle


def try_save_data(data, path):
    """
    :param data: Данные для сохранения
    :param path: Путь
    :return: (успех операции, отчёт об ошибке(если есть))
    """
    try:
        with open(path, 'wb') as file:
            pickle.dump(data, file)
            return True, None
    except Exception as exception:
        return False, exception


def try_load_data(path):
    """
    :param path: Путь файла для загрузки
    :return: (загруженные данные или None в случае ошибки, отчёт об ошибке(если есть))
    """
    try:
        with open(path, 'rb') as file:
            return pickle.load(file), None
    except Exception as exception:
        return None, exception



------------------------------------------------------------
project.py:

class Project:
    def __init__(self, project_name, project_path, ignore = False):
        self.delta_time = 0
        self.project_name = project_name
        self.project_path = project_path
        self.ignore = ignore




------------------------------------------------------------
start_ui.py:
import tkinter as tk
from tkinter import messagebox

MAX_USERNAME_LENGTH = 30


def get_username():
    """
    Открывает меню с надписью 'введите имя пользователя'
    :return: Имя пользователя
    """
    def on_submit():
        username_ = entry.get().strip()
        if not username_:
            messagebox.showwarning("Предупреждение", "Пожалуйста, введите своё имя пользователя!")
        elif len(username_) > MAX_USERNAME_LENGTH:
            messagebox.showwarning("Предупреждение", f"Имя пользователя не может быть длиннее {MAX_USERNAME_LENGTH} символов!")
        else:
            nonlocal user_input
            user_input = username_
            root.destroy()

    user_input = None

    root = tk.Tk()
    root.title("Alpha Technologies")
    root.iconbitmap("alpha_games_logo_v3.ico")
    root.geometry("400x200")
    root.resizable(False, False)

    tk.Label(root, text="Добро пожаловать!", font=("Arial", 14)).pack(pady=10)
    tk.Label(root, text="Введите имя пользователя:").pack()

    entry = tk.Entry(root, width=30)
    entry.pack(pady=5)

    submit_button = tk.Button(root, text="Ок", command=on_submit)
    submit_button.pack(pady=10)

    tk.Label(root, text=f"GO software", font=("Arial", 8)).pack(pady=10)

    root.mainloop()

    return user_input

# Пример использования
if __name__ == "__main__":
    username = get_username()
    if username:
        print(f"Введённое имя пользователя: {username}")



------------------------------------------------------------
time_converter.py:

def seconds_to_hms(seconds):
    """Переводит секунды в формат ЧЧ:ММ:СС"""
    seconds = round(seconds)
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return f"{hours:02}:{minutes:02}:{seconds:02}"


def seconds_to_hm(seconds):
    """Переводит секунды в формат ЧЧ:ММ"""
    seconds = round(seconds)
    hours = seconds // 3600
    minutes = int((seconds % 3600) / 60)
    return f"{hours:02}:{minutes:02}"


def hms_to_seconds(hms : str):
    """Переводит время в формате 'ЧЧ:ММ:СС' или 'ЧЧ:ММ' обратно в секунды"""
    parts = list(map(int, hms.split(':')))
    if len(parts) == 3:
        hours, minutes, seconds = parts
        return hours * 3600 + minutes * 60 + seconds
    elif len(parts) == 2:
        hours, minutes = parts
        return hours * 3600 + minutes * 60
    else:
        print('Ошибка в time_converter.hms_to_seconds: некорректный формат времени, читай описание функции')
    return 0




------------------------------------------------------------
time_to_file_operator.py:
import txt_operator
import time_converter
from os import path

local_path_to_file = 'WORK_TIME' # Полный путь к файлу будет выглядеть так: путь_к_проекту/local_path_to_file/{имя_пользователя}.txt


async def try_update_work_time_file(username, project_directory, project_name, date, delta_time):
    """
    Изменяет время работы над проектом в файле по пути указанному пути
    :param username: имя пользователя
    :param project_directory: путь к проекту
    :param project_name: имя проекта
    :param date: дата, для которой изменить время работы
    :param delta_time: изменение времени работы
    :return: успех операции
    """
    global_path_to_file = path.join(project_directory, local_path_to_file, f'{username}.txt')
    old_content = txt_operator.try_read_file(global_path_to_file)
    if old_content is not None:
        lines_list = old_content.splitlines()

        all_time = 0
        line_detected = False
        for line_num in range(5, len(lines_list)):
            date_time = lines_list[line_num][lines_list[line_num].find(' - ') + 3:]
            date_time_seconds = time_converter.hms_to_seconds(date_time)
            all_time += date_time_seconds
            if not line_detected and date in lines_list[line_num]:
                lines_list[line_num] = f'{date} - {time_converter.seconds_to_hms(date_time_seconds + delta_time)}'
                line_detected = True

        total_hours = all_time / float(3600)
        if total_hours < 1:
            total_hours = round(total_hours, 2)
        elif total_hours < 24:
            total_hours = round(total_hours, 1)
        else:
            total_hours = round(total_hours)

        lines_list[3] = f'Total hours: {total_hours}'
        if not line_detected:
            lines_list.append(f'{date} - {time_converter.seconds_to_hms(delta_time)}')

        new_content = ''
        for line in lines_list:
            new_content += f'{line}\n'
        new_content = new_content.rstrip()
        return txt_operator.try_write_file(global_path_to_file, new_content)
    else:
        new_content = f"""User: {username}
Project: {project_name}
--------------------------------
Total hours: 0
--------------------------------
"""
        return txt_operator.try_write_file(global_path_to_file, new_content)




------------------------------------------------------------
txt_operator.py:
import os


def try_read_file(directory):
    """
    :return: текст .txt файла (или None в случае ошибки)
    """
    try:
        with open(directory, "r", encoding="utf-8") as file:
            content = file.read()  # Чтение всего содержимого файла
            return content
    except:
        return None


def try_write_file(directory, content):
    """
    Сохраняет или обновляет .txt файл. Если директория не существует, создаёт её.
    :param directory: путь, по которому записать файл
    :param content: текст, который записать в файл
    :return: успех операции
    """
    try:
        # Получаем путь к директории
        dir_path = os.path.dirname(directory)
        if dir_path and not os.path.exists(dir_path):
            os.makedirs(dir_path)  # Создаем директорию, если её нет

        # Записываем в файл
        with open(directory, "w", encoding="utf-8") as file:
            file.write(content)
        return True
    except Exception as e:
        print(f"Ошибка при записи файла: {e}")
        return False





------------------------------------------------------------
work_time_analyser.py:
import asyncio
import os
import time
from datetime import datetime

import pygetwindow as gw
import psutil
import win32gui

import time_to_file_operator
from project import Project
import activity_detector
import pickle_operator

from new_project_ui import open_new_project_ui
from enum import Enum

from start_ui import get_username

USER_SETTINGS_DATA_PATH = 'user_data.pkl'
PROJECTS_DATA_PATH = 'projects.pkl'

PROJECTS_SEARCH_DELAY = 5 # Интервал поиска новых проектов
TIME_ADD_DELAY = 5 # Интервал добавления времени
FILES_UPDATE_DELAY = 10 # Интервал обновления файлов с временем работы

username = 'default'
monitored_programs = {'pycharm', 'unity'}
registered_projects = dict()  # key - название проекта, value - экземпляр класса Project
active_project = '' # Название активного проекта


class SupportedPrograms(Enum):
    NOT_SUPPORTED_PROGRAM = 0,
    PYCHARM = 1,
    UNITY = 2


def get_pid_from_hwnd(hwnd):
    """Получает PID процесса по HWND окна"""
    import win32process
    try:
        _, pid = win32process.GetWindowThreadProcessId(hwnd)
        return pid
    except Exception as e:
        print(f"Error getting PID: {e}")
        return None

def get_program_type(window, hwnd):
    """Определяет, поддерживается ли программа, и в положительном случае её тип"""
    pid = get_pid_from_hwnd(hwnd)
    if pid:
        try:
            proc = psutil.Process(pid)
            proc_name = proc.name().lower()
            if 'pycharm' in monitored_programs and 'pycharm' in proc_name:
                return SupportedPrograms.PYCHARM
            elif ('unity' in monitored_programs and
                  'unity' in proc_name and
                  'unity hub' not in proc_name and
                  'unity package manage' not in proc_name and
                  'unity' in window.title.lower() and
                  not 'unity.ex' in window.title.lower()):

                return SupportedPrograms.UNITY
            else:
                return SupportedPrograms.NOT_SUPPORTED_PROGRAM
        except (psutil.NoSuchProcess, psutil.AccessDenied, ValueError) as e:
            print(f"Ошибка при обработке PID {pid}: {e}")
    return SupportedPrograms.NOT_SUPPORTED_PROGRAM

def get_project_name_from_program_title(program_type, program_title):
    match program_type:
        case SupportedPrograms.PYCHARM:
            return program_title[:program_title.rfind(' – ')]
        case SupportedPrograms.UNITY:
            return program_title[:program_title.find(' - ')]


async def search_active_projects():
    global active_project, registered_projects
    
    while True:
        await asyncio.sleep(PROJECTS_SEARCH_DELAY)
        active_window = gw.getActiveWindow()
        if active_window:
            hwnd = win32gui.GetForegroundWindow()
            #print(f'{get_program_type(active_window, hwnd).name}: {get_project_name_from_program_title(get_program_type(active_window, hwnd), active_window.title)}')

            program_type = get_program_type(active_window, hwnd)
            if program_type is not SupportedPrograms.NOT_SUPPORTED_PROGRAM:
                loaded_projects, error = pickle_operator.try_load_data(PROJECTS_DATA_PATH)
                if loaded_projects and 'needs_update_13571' in loaded_projects:
                    print('Настройки проектов были изменены, загружаю...')
                    registered_projects, _ = pickle_operator.try_load_data(PROJECTS_DATA_PATH)
                    registered_projects.pop('needs_update_13571')
                    pickle_operator.try_save_data(registered_projects, PROJECTS_DATA_PATH)

                project_name = get_project_name_from_program_title(program_type, active_window.title)
                if not project_name in registered_projects.keys():
                    ignore, project_path = open_new_project_ui(program_type.name, project_name)
                    registered_projects[project_name] = Project(project_name, project_path, ignore)
                    pickle_operator.try_save_data(registered_projects, PROJECTS_DATA_PATH)
                else:
                    active_project = project_name
            else:
                active_project = None
        else:
            active_project = None

        #if active_project in registered_projects:
            #print(f'{active_project}: {registered_projects[active_project].delta_time}')
        
        
async def add_work_time():
    await asyncio.sleep(TIME_ADD_DELAY)
    system_last_time = time.time()

    while True:
        await asyncio.sleep(TIME_ADD_DELAY)
        system_time_delta = abs(time.time() - system_last_time)
        multiplier = float(system_time_delta) / TIME_ADD_DELAY
        #print(f'm: {multiplier}')
        if multiplier < 0.9 or multiplier > 1.1:
            print('Слишком большой разрыв времени, кто-то пытается жульничать? Ай-яй')
        else:
            if active_project is not None and not activity_detector.timeout:
                if active_project in registered_projects:
                    registered_projects[active_project].delta_time += system_time_delta
                else:
                    print('Непредвиденная ошибка: активный проект отсутствует в словаре проектов')
        system_last_time = time.time()


async def update_work_time_files():
    while True:
        await asyncio.sleep(FILES_UPDATE_DELAY)
        if active_project is not None and active_project in registered_projects:
            # Форматирование текущей даты в ДД.ММ.ГГГГ
            current_date = datetime.now().strftime("%d.%m.%Y")

            if not registered_projects[active_project].ignore and type(registered_projects[active_project].project_path) == str and os.path.exists(registered_projects[active_project].project_path):
                try:
                    asyncio.create_task(time_to_file_operator.try_update_work_time_file(username, registered_projects[active_project].project_path, active_project, current_date, int(registered_projects[active_project].delta_time)))
                    registered_projects[active_project].delta_time -= int(registered_projects[active_project].delta_time)
                except Exception as e:
                    print(f'Непредвиденная ошибка при обновлении файла с временем работы: {e}')


async def start():
    try:
        # Приветственное окно + ввод ника
        global username
        username, _ = pickle_operator.try_load_data(USER_SETTINGS_DATA_PATH)
        if username is None:
            username = get_username()
            if not username:
                return
            pickle_operator.try_save_data(username, USER_SETTINGS_DATA_PATH)

        # Загрузка проектов
        global registered_projects
        registered_projects, error = pickle_operator.try_load_data(PROJECTS_DATA_PATH)
        if error is not None:
            print(f'Error loading projects data: {error}, creating new file')
            registered_projects = dict()
            pickle_operator.try_save_data(registered_projects, PROJECTS_DATA_PATH)

        # Запуск корутин
        await asyncio.gather(
            activity_detector.start_tracking_activity_timeout(),
            search_active_projects(),
            add_work_time(),
            update_work_time_files()
        )
    except KeyboardInterrupt:
        print("Program stopped")


if __name__ == "__main__":
    asyncio.run(start())

